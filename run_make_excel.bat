@ECHO OFF
SETLOCAL enabledelayedexpansion


@REM :: insert your files here
SET "MDD_FILE=Data\P25xSL0006.mdd"






@REM :: do you need an html file with fields from MDD? It is quite useful
@REM :: set to "1==1" (which means true in bat files) to have this file generated
SET "CONFIG_PRODUCE_HTML_MDD=1==1"


@REM :: set to "1==1" if you don't need unnecessary files generated by the script - steps taken when producing final files
@REM :: or, set to "1==0" to have these files stored for debugging
SET "CONFIG_CLEAN_TEMP_MIDDLE_FILES=1==1"







@REM :: go





REM :: file names with file schemes in json
FOR %%F in ("%MDD_FILE%") DO SET "MDD_FILE_LAST_NAME=%%~nxF"
SET "MDD_FILE_SCHEME=%MDD_FILE%.json"



ECHO -
ECHO 1. read MDD
ECHO read from: %MDD_FILE%
ECHO write to: .json
python dist/mdmoverlayhelper_bundle.py --program read_mdd --mdd "%MDD_FILE%" --config-features translations --config-section shared_lists,fields,pages --config-contexts Question --config-sharedlists-listcats stepover
if !ERRORLEVEL! NEQ 0 ( echo ERROR: Failure && pause && goto CLEANUP && exit /b !ERRORLEVEL! )

IF %CONFIG_PRODUCE_HTML_MDD% (
    ECHO -
    ECHO 1.1. generate excel
    python dist/mdmoverlayhelper_bundle.py --program report_excel --inpfile "%MDD_FILE_SCHEME%" --flags mdd_translationoverlays_excel
    if !ERRORLEVEL! NEQ 0 ( echo ERROR: Failure && pause && goto CLEANUP && exit /b !ERRORLEVEL! )
)





ECHO -
ECHO 7 del .json temporary files

IF %CONFIG_CLEAN_TEMP_MIDDLE_FILES% (
    DEL "%MDD_FILE_SCHEME%"
)

ECHO -
:CLEANUP
ECHO 999. Clean up
REM REM :: comment: just deleting trach .pyc files after the execution - they are saved when modules are loaded from within bndle file created with pinliner
REM REM :: however, it is necessary to delete these .pyc files before every call of the mdmoverlayhelper_bundle
REM REM :: it means, 6 more times here, in this script; but I don't do it cause I have this added to the linliner code - see my pinliner fork
DEL *.pyc
IF EXIST __pycache__ (
DEL /F /Q __pycache__\*
)
IF EXIST __pycache__ (
RMDIR /Q /S __pycache__
)

ECHO done!
exit /b !ERRORLEVEL!

